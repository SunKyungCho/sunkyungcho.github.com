<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>보조기억장치</title>
    <description>개발관련 보조기억장치
</description>
    <link>http://sunkyungch.github.io/backup_memory/</link>
    <atom:link href="http://sunkyungch.github.io/backup_memory/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 03 Dec 2018 20:47:11 +0900</pubDate>
    <lastBuildDate>Mon, 03 Dec 2018 20:47:11 +0900</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>스프링부트-시큐리티(Springboot Security) 적용하기</title>
        <description>&lt;p&gt;Springboot security를 활용해 로그인(Login)기능과 리멤버미(remember-me) 기능을 기록한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;spring-boot-security-&quot;&gt;Spring boot Security 적용하기&lt;/h1&gt;
&lt;p&gt;스프링 시큐리티를 사용하면 간단한 몇가지 설정만으로 로그인 기능을 구현 할 수 있다. 스프링 시큐리티의 기본구성을 어떻게 하면 되는지 간단한 구현과 사용방법에 대해 기록한다.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;1. 로그인 기능&lt;/h2&gt;
&lt;p&gt;Account라는 계정정보를 관리하는 테이블이 있고 JPA를 통해 관리되는 프로세스를 가지고 있다고 가정하고 일부 소스는 생략했다. 설정에 관한 것 위주로 설명한다.&lt;/p&gt;

&lt;h4 id=&quot;gradle-dependencies-&quot;&gt;Gradle dependencies 추가&lt;/h4&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'org.springframework.boot:spring-boot-starter-data-jpa'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'org.springframework.boot:spring-boot-starter-security'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;구현을 위해서 SpringData-JPA와 Security를 선언한다. 버전은 따로 명시하지 않아도 스프링부트에서 알맞게 잡아준다.&lt;/p&gt;

&lt;h4 id=&quot;accountjava&quot;&gt;Account.Java&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;@Getter //lombok
@Setter //lombok
@Entity
public class Account {

    @Id
    @Column(name = &quot;account_id&quot;)
    private String accountId;
    @Column(name = &quot;password&quot;)
    private String password;
    @Column(name = &quot;role&quot;)
    private String role;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;간단한 계정정보를 관리한다. 계정ID, 비밀번호, 권한정보를 가지고 있다.&lt;/p&gt;

&lt;h4 id=&quot;accountrepositoryjava&quot;&gt;AccountRepository.Java&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;@Repository
public interface AccountRepository extends JpaRepository&amp;lt;Account, String&amp;gt;{
    Account findByAccountId(String accountID);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;DB에서 계정정보를 가지고 올 Repository 작성.&lt;/p&gt;

&lt;h4 id=&quot;userdetailsimpljava&quot;&gt;UserDetailsImpl.Java&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;public class UserDetailsImpl extends User {

    public UserDetailsImpl(Account account) {
        super(account.getAccountId(), account.getPassword(), getAuthorities(account));
    }

    private static Collection&amp;lt;GrantedAuthority&amp;gt; getAuthorities(Account account) {
        List&amp;lt;GrantedAuthority&amp;gt; authorities = new ArrayList&amp;lt;&amp;gt;();
        authorities.add(new SimpleGrantedAuthority(account.getRole()));
       return authorities;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;userdetailserviceimpljava&quot;&gt;UserDetailServiceImpl.Java&lt;/h4&gt;
&lt;p&gt;UserDetailService는 아래와 같이 loadUserByUsername에 대한 메소드만 구현해주면 된다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;@Service
public class UserDetailsServiceImpl implements UserDetailsService {

    @Autowired
    AccountRepository accountRepository;

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {

        Account account = accountRepository.findByAccountId(username);
        if (account == null){
            throw new UsernameNotFoundException(username);
        }
        return new UserDetailsImpl(account);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 두 클래스의 목적은 간단하다. 사용자가 입력한 username으로 DB에서 계정정보를 조회하고 만약 값이 없다면 UsernameNotFoundException을 날리게 될것이고 존재한다면 사용자 계정정보(ID, password, 권한정보)갖게 된다. 이정보를 가지고 내부적으로 login기능을 구현하는데 사용할 것이다.&lt;/p&gt;

&lt;h3 id=&quot;securityconfig-&quot;&gt;SecurityConfig 작성&lt;/h3&gt;
&lt;p&gt;Java configuration으로 설정을 모두 처리한다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;@Configuration
public class SpringSecurityConfig extends WebSecurityConfigurerAdapter {

    @Autowired
    UserDetailsService userDetailsService;

    //------(1)
    @Override
    protected void configure(HttpSecurity http) throws Exception {

        http.csrf().disable()
            .authorizeRequests()
                .antMatchers(&quot;/&quot;, &quot;/home&quot;, &quot;/join&quot;,&quot;/join-process&quot;).permitAll()
                .antMatchers(&quot;/user/**&quot;).hasAnyRole(&quot;USER&quot;)
                .anyRequest().authenticated()
            .and()
            .formLogin()
                .loginPage(&quot;/login&quot;)
                .permitAll()
            .and()
            .logout()
                .permitAll();
    }

    //-----(2)
    @Autowired
    public void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(1) antMatchers를 통해 URL별 권한을 설정해 줄 수 있다. &lt;code class=&quot;highlighter-rouge&quot;&gt;permitAll()&lt;/code&gt;은 권한 없이 누구나 다 접근 가능한 결로가 될 것이다. /user/** 경로는 USER권한을 갖은 사용자만 접근이 가능할 것이다. 이 페이지에 접근하지 위해서는 login을 해야한다. 권한이 필요하기 때문에 자동적으로 formLogin에 설정되어 있는 /login페이지로 이동하게 된다.
추가로 &lt;code class=&quot;highlighter-rouge&quot;&gt;.hasAnyRole(&quot;USER&quot;)&lt;/code&gt;은 내부적으로 앞에 &lt;strong&gt;ROLE_&lt;/strong&gt; 가 붙게 된다. 즉, &lt;code class=&quot;highlighter-rouge&quot;&gt;.hasAuthority(&quot;ROLE_USER&quot;)&lt;/code&gt;와 동일하게 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;(2) 앞서 생성해 놓은 &lt;code class=&quot;highlighter-rouge&quot;&gt;userDetailsService&lt;/code&gt; 와 &lt;code class=&quot;highlighter-rouge&quot;&gt;passwordEncoder&lt;/code&gt; 를 등록해 패스워스를 암호화 시킨다.
이렇게 설정을 해 놓으면 security의 간단한 로그인 기능 설정은 끝이다. 추가로 세세하게 설정할 수도 있다. login시 계정정보를 Spring security가 알아서 비교하여 로그인 실패와 성공을 알려준다.&lt;/p&gt;

&lt;p&gt;추가로 login form의 파라미터 정보를 지정해줄수 있는데 디폴트설정으로는 ‘username’과 ‘password’로 파라미터를 받는다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    .formLogin()
         .loginPage(&quot;/login&quot;)
         .loginProcessingUrl(&quot;/authentication&quot;)
         .usernameParameter(&quot;userId&quot;)
         .passwordParameter(&quot;password&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;/authentication 으로 userId와 password를 던져서 로그인 처리를 한다.&lt;/p&gt;

&lt;h2 id=&quot;remember-me&quot;&gt;2. Remember-me&lt;/h2&gt;

&lt;p&gt;remember-me 기능은 로그인정보를 기억하여 사용자가 재접속시 별도의 별그인과정을 거치지 않고 로그인 인증을 해주는 기능. 쿠키 방식과 영속성(persistence)방식이 있다. 여기에서는 좀 더 활용성 있는 구현을 위해 영속성 방식으로 구현 했다.&lt;/p&gt;

&lt;p&gt;위에 구현했던 로그인 기능에 remember-me를 추가한다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;
@Configuration
public class SpringSecurityConfig extends WebSecurityConfigurerAdapter {


    @Autowired
    UserDetailsService userDetailsService;

    @Override
    protected void configure(HttpSecurity http) throws Exception {

        http.csrf().disable()
          .authorizeRequests()
              .antMatchers(&quot;/&quot;, &quot;/home&quot;, &quot;/join&quot;,&quot;/join-process&quot;).permitAll()
              .antMatchers(&quot;/user/**&quot;).hasAnyRole(&quot;USER&quot;)
              .anyRequest().authenticated()
          .and()
          .formLogin()
              .loginPage(&quot;/login&quot;)
              .permitAll()
          .and()
          .logout()
              .permitAll()
          .and()
          .rememberMe()
              .key(&quot;security-example&quot;)
              .rememberMeServices(persistentTokenBasedRememberMeServices())
              .tokenValiditySeconds(8640000);
    }

    // create two users, admin and user
    @Autowired
    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());
    }

    @Bean
    public RememberMeServices persistentTokenBasedRememberMeServices() {

        PersistentTokenBasedRememberMeServices persistentTokenBasedRememberMeServices =
                new PersistentTokenBasedRememberMeServices(&quot;security-example&quot;, userDetailsService, persistentTokenRepository());
        persistentTokenBasedRememberMeServices.setParameter(&quot;remember_me&quot;);
        return persistentTokenBasedRememberMeServices;
    }
    @Bean
    public PersistentTokenRepositoryImpl persistentTokenRepository() {
        PersistentTokenRepositoryImpl persistentTokenRepository = new PersistentTokenRepositoryImpl();
        return persistentTokenRepository;
    }


    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;security-example 이라고 된 remember-key값은 원하는 값으로 변경해도 두 곳 모두 되지만 동일하게 유지해야한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setParameter()&lt;/code&gt;의 값은 view 페이지에서 로그인 상태여부를 체크하는 파라미터의  &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; 이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음은 &lt;code class=&quot;highlighter-rouge&quot;&gt;PersistentTokenRepositoryImpl&lt;/code&gt;를 구현해보겠다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;@Repository
@Transactional
public class PersistentTokenRepositoryImpl implements PersistentTokenRepository {

    @Autowired
    TokenRepository tokenRepository;

    @Override
    public void createNewToken(PersistentRememberMeToken token) {
        Token newToken = new Token();
        newToken.setUsername(token.getUsername());
        newToken.setSeries(token.getSeries());
        newToken.setToken(token.getTokenValue());
        newToken.setLastUsed(token.getDate());
        tokenRepository.save(newToken);
    }

    @Override
    public void updateToken(String series, String tokenValue, Date lastUsed) {
        Token token = tokenRepository.findOne(series);
        token.setToken(tokenValue);
        token.setLastUsed(lastUsed);
        tokenRepository.save(token);
    }

    @Override
    public PersistentRememberMeToken getTokenForSeries(String seriesId) {
        System.out.println(&quot;seriesId : &quot; + seriesId);
        Token token = tokenRepository.findOne(seriesId);

        PersistentRememberMeToken persistentRememberMeToken =
                new PersistentRememberMeToken(token.getUsername(), seriesId, token.getToken(), token.getLastUsed());
        return persistentRememberMeToken;
    }

    @Override
    public void removeUserTokens(String username) {
        tokenRepository.deleteByUsername(username);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PersistentTokenRepository&lt;/code&gt; 를 직접 구현해줬다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TokenRepository&lt;/code&gt;는 아래와 같다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;@Repository
public interface TokenRepository extends JpaRepository&amp;lt;Token, String&amp;gt;{

    int deleteByUsername(String username);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Token&lt;/code&gt;의 객체를 정의한다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;@Getter
@Setter
@Entity
@Table(name=&quot;remember_me_token&quot;, catalog = &quot;toy_db&quot;)
public class Token {

    @Column(name = &quot;username&quot;)
    private String username;
    @Id
    @Column(name = &quot;series&quot;)
    private String series;
    @Column(name = &quot;token&quot;)
    private String token;
    @Column(name = &quot;last_used&quot;)
    private Date lastUsed;

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이렇게 해주면 구현된다.
이 구조는 조금은 커스텀된 형태로 구현을 한것인데 더 간단히 사용하기 위해서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;JdbcTokenRepositoryImpl&lt;/code&gt;를 사용해도 된다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;@Autowired
DataSource dataSource; //추가한다.

@Bean
public PersistentTokenRepository jdbcTokenRepository() {
	JdbcTokenRepositoryImpl repository = new JdbcTokenRepositoryImpl();
	repository.setCreateTableOnStartup(false);
	repository.setDataSource(dataSource);			
	return repository;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PersistentTokenRepositoryImpl&lt;/code&gt; 대신 &lt;code class=&quot;highlighter-rouge&quot;&gt;JdbcTokenRepositoryImpl&lt;/code&gt; 를 구현해주고 dataSource를 설정해주면 별도의&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`persistent_logins`&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;`username`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;`series`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;`token`&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;`last_used`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CURRENT_TIMESTAMP&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CURRENT_TIMESTAMP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`series`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENGINE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InnoDB&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHARSET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;latin1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;tokenRepository를 구현하지 않아도 &lt;code class=&quot;highlighter-rouge&quot;&gt;persistent_logins&lt;/code&gt; 테이블에 token정보가 저장된다.&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;마치며&lt;/h2&gt;
&lt;p&gt;로그인을 구현하는데 있어서 쉽게 구현할 수 있었다. 로그인을 구현한다는것은 여간 까다롭고 귀찮은 일이 아니다. spring-security가 알아서 편리하게 해주니 좋다. 이것을 기초로 응용해 더 안전한 로그인 기능을 구현할 수 있겟다.&lt;/p&gt;
</description>
        <pubDate>Wed, 18 Apr 2018 17:43:59 +0900</pubDate>
        <link>http://sunkyungch.github.io/backup_memory/java/2018/04/18/spring-security.html</link>
        <guid isPermaLink="true">http://sunkyungch.github.io/backup_memory/java/2018/04/18/spring-security.html</guid>
        
        
        <category>Java</category>
        
      </item>
    
  </channel>
</rss>
